# Copyright 2024 antillia.com Toshiyuki Arai
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# TensorflowImageMaskDataset.py

# This code is based on the python script in the following web-site
# https://github.com/nikhilroxtomar/Human-Face-Segmentation-in-TensorFlow
# https://kiansoon.medium.com/semantic-segmentation-is-the-task-of-partitioning-an-image-into-multiple-segments-based-on-the-356a5582370e
# https://pyimagesearch.com/2022/02/21/u-net-image-segmentation-in-keras/
# https://www.tensorflow.org/tutorials/images/segmentation
# https://keras.io/examples/vision/deeplabv3_plus/


import os
import cv2
import glob
import numpy as np
import tensorflow as tf

import traceback
from ConfigParser import ConfigParser
from BaseImageMaskDataset import BaseImageMaskDataset
from PIL import Image

class TensorflowImageMaskDataset(BaseImageMaskDataset):
 
  def __init__(self, config_file):
    super().__init__(config_file)
    print("=== TensorflowImageMaskDataset.constructor")
  
    self.num_classes = self.config.get(ConfigParser.MODEL, "num_classes")
    self.mask_colors = self.config.get(ConfigParser.MASK, "mask_colors")
    print("--- mask_colors {}".format(self.mask_colors))

  def read_image_file(self, x):     
    x = cv2.imread(x, cv2.IMREAD_COLOR)
    x = cv2.resize(x, (self.image_width, self.image_height))
    x = x/255.0
    x = x.astype(np.float32)
    #x = x.astype(np.uint32)

    return x
  
  def pil2cv(self, image):
    new_image = np.array(image, dtype=np.uint8)
    if new_image.ndim == 2: 
        pass
    elif new_image.shape[2] == 3: 
        new_image = cv2.cvtColor(new_image, cv2.COLOR_RGB2BGR)
    elif new_image.shape[2] == 4: 
        new_image = cv2.cvtColor(new_image, cv2.COLOR_RGBA2BGRA)
    return new_image
  
  def read_mask_file(self, y):
    y = Image.open(y)
    y = y.resize((self.image_width, self.image_height))
    #y = y.convert("P")
    palette = y.getpalette()
    num_colors = len(palette)/3
    print("---Num colors {}".format(num_colors))
    input("---------")
    y = self.pil2cv(y)
    y = y.astype(np.uint8)
    y  = np.expand_dims(y, axis=-1)

    #y = tf.one_hot(y, self.num_classes)

    return y

  def read_mask_file(self, y):
    y = cv2.imread(y, cv2.IMREAD_GRAYSCALE)
    y = cv2.resize(y, (self.image_width, self.image_height))
    y = y.astype(np.uint8)
    #y = tf.one_hot(y, self.num_classes)
    y  = np.expand_dims(y, axis=-1)

    return y
